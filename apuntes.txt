archivo de configuración webpack
  webpack.config.js

se crea modulo con la configuración deseada
  module.exports={
    entry:'./src/index.js', (Archivo donde se origina el proyecto)
    output:{ (archivo de salida )
      path :path.resolve(__dirname, 'dist'), (encontrar el directorio llamado dist)
      filename: 'main.js' (el nombre del archivo de salida)
    },
    resolve:{
      extensions:['.js'] (extensiones que se usaran, js o svelte, react, etc)
    }
  }

Para configurar el archivo webpack se usa el siguiente comando
  npx webpack --mode production --config webpack.config.js

se puede crear un script en package.json para pasar a modo producción
  "build": "webpack --mode production"
  npm run build (para ejecutar)

Instalar todas las dependencias necesarias de babel para que sea compatible con todos los navegadores
  npm install babel-loader @babel/core @babel/preset-env @babel/plugin-transform-runtime -D

Crear archivo .babelrc y incluir configuraciones agregadas (presets y plugins)
  {
  "presets":[
    "@babel/preset-env",
    "@babel/plugin-transform-runtime"
  ]
}


agregar en webpack.config.js
  module: {
    rules: [
      {
        test: /\.m?js$/,  (expresión regular-utiliza cualquier extension que termine en mjs o js)
        exclude: /node_modules/, (excluir módulos de node)
        use: {
          loader: "babel-loader", (usar loader babel)
        },
      },
    ],
  },

se ejecuta el comando de modo de producción para ver que el código cambia

instalar plugin html en webpack
  npm install html-webpack-plugin -D

se agrega const a webpack.config
  const HtmlWebpackPlugin = require("html-webpack-plugin");

también se agrega apartado de plugin
  Plugin:[
    new HtmlWebpackPlugin({
      inject:true,
      template:'./public/index.html',
      filename:'./index.html'
    })
  ]

Se elimina la linde a que importa el script en ./public/index.html ya que webpack lo hará automáticamente

Para css y pre procesadores, instalar los siguientes plugins
  npm install mini-css-extract-plugin css-loader -D

borrar del template (./public.index.html) donde se importa el css

Se agrega el import de los estilos en ./src/index.js
  import './styles/main.css';

en webpack config se agrega lo siguiente:
  const MiniCssExtractPlugin = require("mini-css-extract-plugin"); (agregar plugin a documento)

  (configuración del loader de css)
  {
    test: /\.css$/i,
    use: [
      MiniCssExtractPlugin.loader,'css-loader'
    ],
  },

  new MiniCssExtractPlugin(), (uso del plugin)

instalar stylus
  npm install stylus stylus-loader -D

Se cambia parte de la configuración
  {
    test: /\.css|.styl$/i,
    use: [MiniCssExtractPlugin.loader, "css-loader", "stylus-loader"],
  },

mover archivo o elementos de src a dist
  npm install copy-webpack-plugin -D

Agregar configuraciones a webpack.config.js
  const CopyPlugin = require("copy-webpack-plugin");
  
  new CopyPlugin({
      patterns: [
        {
          from: path.resolve(__dirname, "src", "assets/images"),
          to: "assets/images",
        },
      ],
    }),

Loader de imágenes (modulo) para optimizar
  Se agrega en el apartado de modulo y reglas
    {
      test: /\.png/,
      type: 'asset/resource'
    }
  
  ya se pueden importar las imágenes en el template, se usa import y la ruta donde estarán las imágenes
    import github from "../assets/images/github.png";
    <img src="${twitter}" />

Loader de fuentes
  Descargar fonts en formato .woff
  en archivo main.css se agrega lo siguiente:
    @font-face {
      font-family: ubuntu;
      src: url("../assets/fonts/ubuntu-regular.woff2") format("woff2"),
        url("../assets/fonts/ubuntu-regular.woff") format("woff");
      font-weight: 400;
      font-style: normal;
    }

se instalan los siguiente módulos
  npm install url-loader file-loader -D

en webpack.config.js se agrega
  en output
    assetModuleFilename: 'assets/images/[hash][ext][query]'
  en module/rules
    {
      test: /\.(woff|woff2)$/,
      use: {
        loader: "url-loader",
        Option: {
          limit: 10000, (habilitar o deshabilitar la transformación de archivos en base64)
          mimetype: "application/font.woff", (especificar el MIME type(multipurpose internet mail extensions) manera estándar de mandar contenido a traves de la red)
          name: "[name].[ext]", (nombre inicial del archivo y su extension)
          outputPath: "./assets/fonts/", (directorio de salida)
          publicPath: "./assets/fonts/", (directorio publico)
          esModule: false, (avisar explícitamente si es un modulo )
        },
      },
    },

Confirmar que de main.css no se este importando las font de una url de internet

Optimizar proyecto
  Instalar:
    npm install css-minimizer-webpack-plugin terser-webpack-plugin -D

Se crean las constantes 

  const CssMinimizerPlugin = require("css-minimizer-webpack-plugin");
  const TerserPlugin = require("terser-webpack-plugin");

Se agrega después de plugins en webpack config
  optimization: {
    minimize: true,
    minimizer: [new CssMinimizerPlugin(), new TerserPlugin()],
  },

  Se cambian las siguientes configuraciones

  options: {
            limit: 10000,
            mimetype: "application/font.woff",
            name: "[name].[contenthash].[ext]",
            outputPath: "./assets/fonts/",
            publicPath: "./assets/fonts/",
            esModule: false,
  },

  new MiniCssExtractPlugin({
      filename: "assets/[name].[contenthash].css",
  }),

  output: {
    path: path.resolve(__dirname, "dist"),
    filename: "[name].[contenthash].js",
    assetModuleFilename: "assets/images/[hash][ext][query]",
  },

  Los hash son para guardar en memoria cache las paginas y de esa forma se cargan mas rápido, cada vez que se realice una nueva version de la pagina se debe cambiar el hash o no se verán los cambios

Alias para los paths y no usar las rutas manualmente

Se agrega en config en resolve lo siguiente
  alias:{
    '@utils':path.resolve(__dirname,'src/utils/'),
    '@templates':path.resolve(__dirname,'src/templates/'),
    '@styles':path.resolve(__dirname,'src/styles/'),
    '@images':path.resolve(__dirname,'src/images/'),
  }

y se cambian las rutas de la siguiente forma
  import getData from "@utils/getData.js";
  import github from "@images/github.png";
  import twitter from "@images/twitter.png";
  import instagram from "@images/instagram.png";

Tener cuidado con el option de config para que no se pierdan las fonts
  publicPath: "../assets/fonts/",

Variables de entorno
  npm install dotenv-webpack -D

  Crear carpeta .env que es la de variables de entorno
    no se suben al repositorio, si se ingresa a un equipo se deben solicitar ya que son secretas
    se crea la api que se esta usando:
      API=https://randomuser.me/api/
  
  Crear .env.example
    solo se coloca la api sin url
    API=
  
  donde se usa la api (getData.js) se cambia lo siguiente, para evitar que la url de la api se muestre, ya que queda en variables de entorno y no se pueden ver si no se piden, como no se suben al repositorio
    const API = process.env.API;
  

configuraciones para desarrollo
  Crear un archivo webpack.config.dev.js y copiar lo que se tenia en el otro archivo, pero sin la parte de optimización
  después de output se pone lo siguiente
    mode:'development',
  En package.json se cambian los script
    "dev": "webpack --config webpack.config.dev.js"

configuraciones para producción
  el archivo webpack.config.js sigue siendo el mismo
  
  Para limpiar los archivos que se copian mal, ose van creando luego de cada compilación se usa el siguiente plug incluir
    npm install clean-webpack-plugin -D

  para organizar correctamente la carpeta de dist se realiza lo siguiente en webpack.config.js
    const { CleanWebpackPlugin } = require("clean-webpack-plugin");
    new CleanWebpackPlugin(), (en plugins)
  
  En package.json se cambia lo siguiente
    "build": "webpack --mode production --config webpack.config.js",

  Cada vez que se pase a modo developer se crea una instancia nueva, pero al ejecutar el modo de dev se ubicaría unicamente 1 archivo

  otra opción sin instalar mas plugins es escribir el siguiente código en output de webpack.config
    clean: true, se limpiaría sin instalar plugins adicionales


modo watch, escuchar cambios de nuestro proyecto y compilar automáticamente.
  en el config de dev se agrega el siguiente comando luego de mode
      watch: true,
  se ejecuta npm run dev para que se quede activo el modo de desarrollo, y se queda escuchando los cambios, cada vez que se guarde un archivo, detecta el cambio

  Se puede crear un script para que sea estuchando y otro script normalmente como se estaba haciendo, es decir, ejecutar el comando cada vez que se quiera configurar, ejemplo con el modo build con watch
    "build:watch": "webpack --watch --config webpack.config.js"
  o se puede crear y ejecutar el siguiente script, donde se ejecuta el script dev con el flag watch
    "watch": "npm run dev --watch"





